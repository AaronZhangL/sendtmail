#!/usr/bin/python

import argparse
import csv
import os

import libtmail

def build_email(csv_row, templatizer):
    options = {}
    attachments = []
    for k, v in csv_row.iteritems():
        if k.startswith("ATTACHMENT"):
            attachments.append(v)
        elif not k in ["FROM", "TO", "CC", "BCC", "SUBJECT", "BODY"]:
            options[k] = v
    tmail = libtmail.Tmail(templatizer, options)
    if not "FROM" in csv_row or not csv_row["FROM"]:
        raise "Cannot send email without a FROM address"
    tmail.from_addrs = csv_row["FROM"].split(',')
    if "TO" in csv_row and csv_row["TO"]:
        tmail.to_addrs = csv_row["TO"].split(',')
    if "CC" in csv_row and csv_row["CC"]:
        tmail.cc_addrs = csv_row["CC"].split(',')
    if "BCC" in csv_row and csv_row["BCC"]:
        tmail.bcc_addrs = csv_row["BCC"].split(',')
    if not tmail.to_addrs and not tmail.cc_addrs and not tmail.bcc_addrs:
        raise "Cannot send email with no TO, CC, or BCC addresses"
    if "SUBJECT" in csv_row:
        tmail.subject = csv_row["SUBJECT"]
    if "BODY" in csv_row:
        tmail.body = csv_row["BODY"]
    for attachment in attachments:
        tmail.next_attachment = attachment

def parse_account_info(filename):
    with open(filename, 'rU') as account_file:
        host = account_file.readline().strip()
        username = account_file.readline().strip()
        password = account_file.readline().strip()
        return (host, username, password)

def main():
    parser = argparse.ArgumentParser(description='Generate and send templatized emails')
    parser.add_argument('workfile',
        help='a CSV file describing the emails to send (headers, attachments, etc.)')
    parser.add_argument('account',
        help='a file containing the email account details to send from')
    parser.add_argument('-d', '--debug', action='store_true', default=False,
        help='set in debug mode to print templatized emails without sending')
    args = parser.parse_args()
    
    smtp_host, username, password = parse_account_info(args.account)
    email_account = libtmail.EmailAccount(smtp_host, username, password)
    print "Establishing connection to %s as %s." % (smtp_host, username)
    email_account.connection_status = libtmail.ConnectionStatus(libtmail.ConnectionStatus.CONNECTED)
    print "Successfully connected."

    if args.debug:
        print "debug!"
        return 0
        email_account.debug_status = libtmail.DebugStatus(libtmail.DebugStatus.ON)
    else:
        # If not in debug mode, ask for confirmation before continuing
        response = raw_input("Are you sure you want to send emails (y/n)? ")
        if response != 'y':
            print "Exiting."
            email_account.connection_status = libtmail.ConnectionStatus(libtmail.ConnectionStatus.DISCONNECTED)
            return 0
        
    # We need to change into the same directory as the template file
    # since we'll need to resolve any relative paths it contains relative
    # to its position, not ours
    original_dir = os.getcwd()
    workfile_path = os.path.abspath(args.workfile)
    os.chdir(os.path.dirname(workfile_path))

    with open(workfile_path, 'rU') as workfile:

        # DictReader pulls out each row of CSV as a dict and
        # uses first row as keys
        workfile_reader = csv.DictReader(workfile)

        templatizer = libtmail.Templatizer()

        # Each row in the CSV workfile builds one email
        for row in workfile_reader:
            email_account.next_email = build_email(row, templatizer)
	
    os.chdir(original_dir)

    email_account.connection_status = libtmail.ConnectionStatus(libtmail.ConnectionStatus.DISCONNECTED)

if __name__ == '__main__':
    main()
